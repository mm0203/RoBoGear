//=============================================================================
// SceneManager.cpp
//=============================================================================
// Author  松野 将之
// 
//=============================================================================

#include "SceneManager.h"

//=============================================================================
// 
// コンストラクタ
// 
//=============================================================================
SceneManager::SceneManager()
{
	m_pCurrentScene = nullptr;
	m_pNextScene = nullptr;
	m_bDoSceneChange = false;
	m_SceneNo = Scene_None;
}

//=============================================================================
// 
// 初期化処理
// 
//=============================================================================
const void SceneManager::Init()
{
	// 現在のシーン初期化
	m_pCurrentScene->Init();
}

//=============================================================================
// 
// 終了処理
// 
//=============================================================================
const void SceneManager::Uninit()
{
	// 現在のシーン終了
	m_pCurrentScene->Uninit();
}

//=============================================================================
// 
// 終了処理
// 
//=============================================================================
const void SceneManager::Update()
{
	//フェード中は更新しない
	if (m_bDoSceneChange) return;

	// 現在のシーン更新
	m_pCurrentScene->Update();
}

//=============================================================================
// 
// 描画処理
// 
//=============================================================================
const void SceneManager::Draw()
{
	// シーンが違ったら
	if (!m_pCurrentScene) return;

	// 現在のシーン描画
	m_pCurrentScene->Draw();
}

//=============================================================================
// 
// 次のシーン指定
// 
//=============================================================================
const void SceneManager::SetNextScene(Scene* Next)
{
	//フェード中は更新しない
	if (m_bDoSceneChange) return;

	// フェード中
	m_bDoSceneChange = true;

	// フェード中に呼ぶ次のシーンをセット
	Singleton<Fade>::GetInstance().SetFadeOut(Next);
}

//=============================================================================
// 
// フェード終了
// 
//=============================================================================
const void SceneManager::EndFade(Scene* Next)
{
	// 次のシーンをセット
	m_pNextScene.reset(Next);

	// フェード終了
	m_bDoSceneChange = false;
}

//=============================================================================
// 
// シーン遷移
// 
//=============================================================================
const bool SceneManager::ChangeNextScene()
{
	//次のシーンが設定されていなければスキップ
	if (m_pNextScene == nullptr)
		return false;

	// 現在のシーンが読み込まれたらシーンの終了処理
	if (m_pCurrentScene != nullptr)
		m_pCurrentScene->Uninit();

	// 遷移先のシーンを渡す
	m_pCurrentScene = std::move(m_pNextScene);

	// 遷移先のシーンを読み込む
	m_pCurrentScene->Init();

	return true;
}
