//=============================================================================
// SpriteManager.cpp
//=============================================================================
// Author  松野 将之
// 
//=============================================================================

#include "SpriteManager.h"

//=============================================================================
// 
// 静的メンバ
// 
//=============================================================================
std::vector<sprite_shared> SpriteManager::m_pSpriteList;

//=============================================================================
// 
// 初期化
// 
//=============================================================================
void SpriteManager::InitAll()
{
	for (auto& sprite : m_pSpriteList)
		sprite->Init();
}

//=============================================================================
// 
// 更新
// 
//=============================================================================
void SpriteManager::UpdateAll(GameState state)
{
	for (auto& sprite : m_pSpriteList)
		sprite->Update(state);
}

//=============================================================================
// 
// 終了
// 
//=============================================================================
void SpriteManager::UninitAll()
{
	// インスタンスの数を取得
	int objCnt = (int)m_pSpriteList.size();

	// リスト内のインスタンスを削除
	for (int i = 0; i < objCnt; i++)
	{
		sprite_shared sprite;						// 削除用ポインタ
		sprite = *(m_pSpriteList.begin());			// 要素のポインタ
		sprite->Uninit();							// 要素の終了処理を呼ぶ
		m_pSpriteList.erase(m_pSpriteList.begin()); // リストから削除
	}
}

//=============================================================================
// 
// 描画
// 
//=============================================================================
void SpriteManager::DrawAll(GameState state)
{
	for (auto& sprite : m_pSpriteList)
		sprite->Draw(state);
}
